{"rendered_body": "<p><a href=\"https://codeiq.jp/challenge/2903\" rel=\"nofollow noopener\" target=\"_blank\">CodeIQ\u300c\u300e\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u30fb\u30b5\u30e0\u300f\u554f\u984c\u300d</a>\u306e\u63b2\u8f09\u671f\u9650\u304c\u7d42\u4e86\u3057\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u81ea\u5206\u306e\u63d0\u51fa\u30b3\u30fc\u30c9\u3092\u516c\u958b\u3057\u307e\u3059\u3002\u307b\u304b\u306e\u89e3\u7b54\u8005\u306e\u30b3\u30fc\u30c9\u306f<a href=\"http://togetter.com/li/1049668\" rel=\"nofollow noopener\" target=\"_blank\">Togetter</a>\u306b\u307e\u3068\u3081\u3089\u3066\u3044\u308b\u306e\u3067\u3001\u305c\u3072\u3054\u53c2\u8003\u306b\u3002</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre><span class=\"s\">\"\"\"\n\u300c\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u30fb\u30b5\u30e0\u554f\u984c\u300d(https://codeiq.jp/challenge/2903)\u306e\u89e3\u7b54\u30b3\u30fc\u30c9\u3002\n\n== \u65b9\u91dd ==\n\n\u3068\u3042\u308b\u6574\u6570\u306e\u7d04\u6570\u306e\u548c\u306f\u7d20\u56e0\u6570\u5206\u89e3\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u305f\u3068\u3048\u3070\u6574\u6570m\u304c\u6b21\u306e\u3088\u3046\u306b\u7d20\u56e0\u6570\u5206\u89e3\u3067\u304d\u308b\u3068\u3059\u308b: m = p^2 * q^3\n\u3053\u306e\u3068\u304d\u6574\u6570m\u306e\u7d04\u6570\u306e\u548c\u306f (p^0 + p^1 + p^2) * (q^0 + q^1 + q^2  + q^3)\n\n\u672c\u554f\u3067\u306f\u5de8\u5927\u306a\u6574\u6570n!^n\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\nn!^n = 1^n * 2^n * ... * n^n \u3067\u3042\u308b\u304b\u3089\u30011^n, 2^n, ... n^n\u3092\u9806\u756a\u306b\u56e0\u6570\u5206\u89e3\u3059\u308b\u3053\u3068\u3067\u3001\n\u6700\u7d42\u7684\u306bn!^n\u306e\u7d20\u56e0\u6570\u5206\u89e3\u306e\u7d50\u679c\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\"\"\"</span>\n\n\n<span class=\"kn\">import</span> <span class=\"nn\">collections</span><span class=\"p\">,</span> <span class=\"n\">math</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">prime_division</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    x &gt; 0\u3092\u6e80\u305f\u3059\u6574\u6570\u306b\u5bfe\u3057\u3066\u7d20\u56e0\u6570\u5206\u89e3\u3092\u884c\u3046\u3002\n    \u623b\u308a\u5024\u306fkey\u304c\u7d20\u6570\u3001value\u304c\u6307\u6570\u3068\u306a\u308b\u3088\u3046\u306a\u8f9e\u66f8\u3002\n    \"\"\"</span>\n    <span class=\"n\">ht</span> <span class=\"o\">=</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">factor</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n\n        <span class=\"k\">while</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"n\">factor</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"n\">ht</span><span class=\"p\">[</span><span class=\"n\">factor</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n            <span class=\"n\">x</span> <span class=\"o\">//=</span> <span class=\"n\">factor</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">x</span> <span class=\"o\">!=</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">ht</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">return</span> <span class=\"n\">ht</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">geometric_sequence_sum</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    \u521d\u9805a,\u516c\u6bd4r\u306e\u7b49\u6bd4\u6570\u5217\u306b\u3064\u3044\u3066\u7b2c1\u9805\u304b\u3089\u7b2cn\u9805\u307e\u3067\u306e\u548c\u3092\u6c42\u3081\u308b\u3002\n    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"o\">*</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">**</span> <span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">))</span> <span class=\"o\">//</span> <span class=\"p\">(</span><span class=\"n\">r</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"s\">\"\"\"\n    \u554f\u984c\u6587\u4e2d\u306eF(n).\n    \"\"\"</span>\n\n    <span class=\"c\"># 1^n, 2^n, ... n^n\u306b\u3064\u3044\u3066\u7d20\u56e0\u6570\u5206\u89e3\u3092\u884c\u3044\u3001n!^n\u306e\u7d20\u56e0\u6570\u5206\u89e3\u3092\u884c\u3046\u3002</span>\n    <span class=\"n\">factors</span> <span class=\"o\">=</span> <span class=\"n\">collections</span><span class=\"o\">.</span><span class=\"n\">defaultdict</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">prime</span><span class=\"p\">,</span> <span class=\"n\">exp</span> <span class=\"ow\">in</span> <span class=\"n\">prime_division</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span> <span class=\"n\">factors</span><span class=\"p\">[</span><span class=\"n\">prime</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">exp</span> <span class=\"o\">*</span> <span class=\"n\">n</span>\n\n    <span class=\"c\"># (p^0 + p^1 + ... ) * (q^0 + q^1 + ...) * ... \u3092\u6c42\u3081\u308b\u3002\u306a\u304a(p^0 + p^1 + ...)\u306f\u7b49\u6bd4\u6570\u5217\u3067\u3042\u308b\u3002</span>\n    <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">for</span> <span class=\"n\">prime</span><span class=\"p\">,</span> <span class=\"n\">idx</span> <span class=\"ow\">in</span> <span class=\"n\">factors</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n        <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"n\">ans</span> <span class=\"o\">*</span> <span class=\"n\">geometric_sequence_sum</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">prime</span><span class=\"p\">,</span> <span class=\"n\">idx</span><span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"mi\">10</span> <span class=\"o\">**</span> <span class=\"mi\">6</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">ans</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span>\n\n</pre></div></div>\n\n<p>\u6b63\u76f4\u306a\u3068\u3053\u308d\u89e3\u7b54\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u66f8\u3044\u305f\u4ee5\u4e0a\u306e\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u5c11\u3057\u3060\u3051\u30b3\u30e1\u30f3\u30c8\u3057\u3066\u304a\u304d\u307e\u3059\u306d\u3002</p>\n\n<p>\u300c\u300e\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u30fb\u30b5\u30e0\u300f\u554f\u984c\u300d\u306f\u3056\u3063\u304f\u308a\u3044\u3046\u3068<strong>\u300c\u5de8\u5927\u6570\u306e\u7d04\u6570\u306e\u548c\u3092\u6c42\u3081\u308b\u300d</strong>\u3068\u3044\u3046\u5185\u5bb9\u3067\u3057\u305f\u3002\u6574\u6570\u306e\u7d04\u6570\u306e\u548c\u306f\u7d20\u56e0\u6570\u5206\u89e3\u3092\u5229\u7528\u3057\u3066\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u307e\u3059(\u5927\u5b66\u53d7\u9a13\u306a\u3069\u3067\u306f\u983b\u51fa\u3067\u3059\u306d)\u3002\u3088\u3063\u3066\u672c\u554f\u984c\u306f<strong>\u300c\u4e0e\u3048\u3089\u308c\u305f\u5de8\u5927\u6570\u3092\u3069\u308c\u3060\u3051\u3046\u307e\u304f\u7d20\u56e0\u6570\u5206\u89e3\u3067\u304d\u308b\u304b\u300d</strong>\u3068\u3044\u3046\u70b9\u306b\u96c6\u7d04\u3067\u304d\u307e\u3059\u3002\u5de8\u5927\u6570\u3092\u611a\u76f4\u306b\u751f\u6210\u3057\u3066\u3001\u305d\u308c\u304b\u3089\u7d20\u56e0\u6570\u5206\u89e3\u3092\u3059\u308b\u2015\u2015\u3068\u3044\u3046\u65b9\u6cd5\u3067\u306f\u3044\u3046\u307e\u3067\u3082\u306a\u304f\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3002\u3057\u305f\u304c\u3063\u3066\u611a\u76f4\u89e3\u3067\u306f\u306a\u304f\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u65b9\u6cd5\u306b\u6c17\u304c\u4ed8\u304f\u304b\u3068\u3044\u3046\u70b9\u304c\u672c\u554f\u306e\u809d\u3060\u3063\u305f\u3088\u3046\u306b\u601d\u3044\u307e\u3059\u3002</p>\n", "body": "\n[CodeIQ\u300c\u300e\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u30fb\u30b5\u30e0\u300f\u554f\u984c\u300d](https://codeiq.jp/challenge/2903)\u306e\u63b2\u8f09\u671f\u9650\u304c\u7d42\u4e86\u3057\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u81ea\u5206\u306e\u63d0\u51fa\u30b3\u30fc\u30c9\u3092\u516c\u958b\u3057\u307e\u3059\u3002\u307b\u304b\u306e\u89e3\u7b54\u8005\u306e\u30b3\u30fc\u30c9\u306f[Togetter](http://togetter.com/li/1049668)\u306b\u307e\u3068\u3081\u3089\u3066\u3044\u308b\u306e\u3067\u3001\u305c\u3072\u3054\u53c2\u8003\u306b\u3002\n\n```py3\n\"\"\"\n\u300c\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u30fb\u30b5\u30e0\u554f\u984c\u300d(https://codeiq.jp/challenge/2903)\u306e\u89e3\u7b54\u30b3\u30fc\u30c9\u3002\n\n== \u65b9\u91dd ==\n\n\u3068\u3042\u308b\u6574\u6570\u306e\u7d04\u6570\u306e\u548c\u306f\u7d20\u56e0\u6570\u5206\u89e3\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u305f\u3068\u3048\u3070\u6574\u6570m\u304c\u6b21\u306e\u3088\u3046\u306b\u7d20\u56e0\u6570\u5206\u89e3\u3067\u304d\u308b\u3068\u3059\u308b: m = p^2 * q^3\n\u3053\u306e\u3068\u304d\u6574\u6570m\u306e\u7d04\u6570\u306e\u548c\u306f (p^0 + p^1 + p^2) * (q^0 + q^1 + q^2  + q^3)\n\n\u672c\u554f\u3067\u306f\u5de8\u5927\u306a\u6574\u6570n!^n\u3092\u7d20\u56e0\u6570\u5206\u89e3\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308b\u3002\nn!^n = 1^n * 2^n * ... * n^n \u3067\u3042\u308b\u304b\u3089\u30011^n, 2^n, ... n^n\u3092\u9806\u756a\u306b\u56e0\u6570\u5206\u89e3\u3059\u308b\u3053\u3068\u3067\u3001\n\u6700\u7d42\u7684\u306bn!^n\u306e\u7d20\u56e0\u6570\u5206\u89e3\u306e\u7d50\u679c\u3092\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\"\"\"\n\n\nimport collections, math\n\ndef prime_division(x):\n    \"\"\"\n    x > 0\u3092\u6e80\u305f\u3059\u6574\u6570\u306b\u5bfe\u3057\u3066\u7d20\u56e0\u6570\u5206\u89e3\u3092\u884c\u3046\u3002\n    \u623b\u308a\u5024\u306fkey\u304c\u7d20\u6570\u3001value\u304c\u6307\u6570\u3068\u306a\u308b\u3088\u3046\u306a\u8f9e\u66f8\u3002\n    \"\"\"\n    ht = collections.defaultdict(int)\n    for factor in range(2, int(math.sqrt(x)) + 1):\n        if x == 1: break\n        \n        while x % factor == 0:\n            ht[factor] += 1\n            x //= factor\n    \n    if x != 1: ht[x] += 1\n    return ht\n\n\ndef geometric_sequence_sum(a, r, n):\n    \"\"\"\n    \u521d\u9805a,\u516c\u6bd4r\u306e\u7b49\u6bd4\u6570\u5217\u306b\u3064\u3044\u3066\u7b2c1\u9805\u304b\u3089\u7b2cn\u9805\u307e\u3067\u306e\u548c\u3092\u6c42\u3081\u308b\u3002\n    \"\"\"\n    return (a * (r ** n - 1)) // (r - 1)\n\n\ndef f(n):\n    \"\"\"\n    \u554f\u984c\u6587\u4e2d\u306eF(n).\n    \"\"\"\n    \n    # 1^n, 2^n, ... n^n\u306b\u3064\u3044\u3066\u7d20\u56e0\u6570\u5206\u89e3\u3092\u884c\u3044\u3001n!^n\u306e\u7d20\u56e0\u6570\u5206\u89e3\u3092\u884c\u3046\u3002\n    factors = collections.defaultdict(int)\n    for x in range(2, n + 1):\n        for prime, exp in prime_division(x).items(): factors[prime] += exp * n\n    \n    # (p^0 + p^1 + ... ) * (q^0 + q^1 + ...) * ... \u3092\u6c42\u3081\u308b\u3002\u306a\u304a(p^0 + p^1 + ...)\u306f\u7b49\u6bd4\u6570\u5217\u3067\u3042\u308b\u3002\n    ans = 1\n    for prime, idx in factors.items():\n        ans = ans * geometric_sequence_sum(1, prime, idx+ 1) % (10 ** 6 + 3)\n    return ans\n\nif __name__ == '__main__':\n    n = int(input())\n    print(f(n))\n\n```\n\n\u6b63\u76f4\u306a\u3068\u3053\u308d\u89e3\u7b54\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u66f8\u3044\u305f\u4ee5\u4e0a\u306e\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u5c11\u3057\u3060\u3051\u30b3\u30e1\u30f3\u30c8\u3057\u3066\u304a\u304d\u307e\u3059\u306d\u3002\n\n\u300c\u300e\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u30fb\u30b5\u30e0\u300f\u554f\u984c\u300d\u306f\u3056\u3063\u304f\u308a\u3044\u3046\u3068__\u300c\u5de8\u5927\u6570\u306e\u7d04\u6570\u306e\u548c\u3092\u6c42\u3081\u308b\u300d__\u3068\u3044\u3046\u5185\u5bb9\u3067\u3057\u305f\u3002\u6574\u6570\u306e\u7d04\u6570\u306e\u548c\u306f\u7d20\u56e0\u6570\u5206\u89e3\u3092\u5229\u7528\u3057\u3066\u6c42\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u307e\u3059(\u5927\u5b66\u53d7\u9a13\u306a\u3069\u3067\u306f\u983b\u51fa\u3067\u3059\u306d)\u3002\u3088\u3063\u3066\u672c\u554f\u984c\u306f__\u300c\u4e0e\u3048\u3089\u308c\u305f\u5de8\u5927\u6570\u3092\u3069\u308c\u3060\u3051\u3046\u307e\u304f\u7d20\u56e0\u6570\u5206\u89e3\u3067\u304d\u308b\u304b\u300d__\u3068\u3044\u3046\u70b9\u306b\u96c6\u7d04\u3067\u304d\u307e\u3059\u3002\u5de8\u5927\u6570\u3092\u611a\u76f4\u306b\u751f\u6210\u3057\u3066\u3001\u305d\u308c\u304b\u3089\u7d20\u56e0\u6570\u5206\u89e3\u3092\u3059\u308b\u2015\u2015\u3068\u3044\u3046\u65b9\u6cd5\u3067\u306f\u3044\u3046\u307e\u3067\u3082\u306a\u304f\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3002\u3057\u305f\u304c\u3063\u3066\u611a\u76f4\u89e3\u3067\u306f\u306a\u304f\u3001\u3088\u308a\u6d17\u7df4\u3055\u308c\u305f\u65b9\u6cd5\u306b\u6c17\u304c\u4ed8\u304f\u304b\u3068\u3044\u3046\u70b9\u304c\u672c\u554f\u306e\u809d\u3060\u3063\u305f\u3088\u3046\u306b\u601d\u3044\u307e\u3059\u3002\n\n", "coediting": false, "comments_count": 0, "created_at": "2016-12-01T23:41:52+09:00", "group": null, "id": "aaf73e7515571c787698", "likes_count": 0, "private": false, "reactions_count": 0, "tags": [{"name": "codeiq", "versions": []}, {"name": "Python3", "versions": []}], "title": "CodeIQ\u300c\u300e\u30c7\u30a3\u30d3\u30b8\u30e7\u30f3\u30fb\u30b5\u30e0\u300f\u554f\u984c\u300d\u306b\u53c2\u52a0\u3057\u307e\u3057\u305f\u3002", "updated_at": "2016-12-01T23:43:39+09:00", "url": "https://qiita.com/neko_the_shadow/items/aaf73e7515571c787698", "user": {"description": "\u3044\u307e\u307e\u3067\u4f7f\u3063\u3066\u3044\u305f\u306f\u3066\u306a\u30d6\u30ed\u30b0\u304c\u3001\u63a8\u7406\u5c0f\u8aac\u3084\u5192\u967a\u5c0f\u8aac\u4e2d\u5fc3\u306e\u66f8\u8a55\u30d6\u30ed\u30b0\u3068\u5316\u3057\u305f\u306e\u3067\u3001\u6280\u8853\u7684\u5185\u5bb9\u306f\u3053\u3061\u3089\u3078\u5f15\u3063\u8d8a\u3057\u3066\u304d\u307e\u3057\u305f(\u00b4\u30fb\u03c9\u30fb`)", "facebook_id": "", "followees_count": 0, "followers_count": 21, "github_login_name": null, "id": "neko_the_shadow", "items_count": 124, "linkedin_id": "", "location": "\u795e\u5948\u5ddd\u770c\u5ddd\u5d0e\u5e02", "name": "", "organization": "", "permanent_id": 105859, "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753", "team_only": false, "twitter_screen_name": "neko_the_shadow", "website_url": "https://nekotheshadow.github.io/"}, "page_views_count": null}
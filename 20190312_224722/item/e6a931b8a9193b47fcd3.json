{"rendered_body": "<p>\u30b5\u30a4\u30ba$n$\u306e\u9806\u5217\u3092\u3059\u3079\u3066\u751f\u6210\u3059\u308b\u51e6\u7406\u3092C#\u3067\u5b9f\u88c5\u3059\u308b\u6a5f\u4f1a\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u30e1\u30e2\u306b\u306a\u308a\u307e\u3059\u3002Ruby\u3084Python\u3060\u3068\u9806\u5217\u306e\u5217\u6319\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u3075\u3060\u3093\u306f\u305d\u3046\u3044\u3046\u300c\u51fa\u6765\u5408\u3044\u300d\u306e\u3082\u306e\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3001\u81ea\u529b\u3067\u5b9f\u88c5\u3059\u308b\u306e\u306b\u601d\u3063\u305f\u3088\u308a\u3082\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3063\u305f(\u00b4\u30fb\u03c9\u30fb\uff40)</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><span class=\"k\">using</span> <span class=\"nn\">System</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Collections.Generic</span><span class=\"p\">;</span>\n<span class=\"k\">using</span> <span class=\"nn\">System.Linq</span><span class=\"p\">;</span>\n\n<span class=\"k\">namespace</span> <span class=\"nn\">permutations</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Program</span>\n    <span class=\"p\">{</span>\n        <span class=\"k\">static</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;&gt;</span> <span class=\"n\">Permutations</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;(</span><span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"p\">{</span>\n            <span class=\"c1\">// n\u306f1\u4ee5\u4e0a\u304b\u3064src\u306e\u9577\u3055\u3088\u308a\u3082\u77ed\u3044\u5fc5\u8981\u304c\u3042\u308b\u3002</span>\n            <span class=\"kt\">int</span> <span class=\"n\">len</span> <span class=\"p\">=</span> <span class=\"n\">src</span><span class=\"p\">.</span><span class=\"n\">Count</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(!(</span><span class=\"m\">0</span> <span class=\"p\">&lt;</span> <span class=\"n\">n</span> <span class=\"p\">&amp;&amp;</span> <span class=\"n\">n</span> <span class=\"p\">&lt;=</span> <span class=\"n\">len</span><span class=\"p\">))</span>\n            <span class=\"p\">{</span>\n                <span class=\"k\">throw</span> <span class=\"k\">new</span> <span class=\"nf\">ArgumentOutOfRangeException</span><span class=\"p\">();</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"kt\">var</span> <span class=\"n\">permutations</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;&gt;();</span>\n            <span class=\"kt\">var</span> <span class=\"n\">queue</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">Queue</span><span class=\"p\">&lt;</span><span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;&gt;(</span><span class=\"n\">Enumerable</span><span class=\"p\">.</span><span class=\"nf\">Range</span><span class=\"p\">(</span><span class=\"m\">0</span><span class=\"p\">,</span> <span class=\"n\">len</span><span class=\"p\">).</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"p\">=&gt;</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;()</span> <span class=\"p\">{</span> <span class=\"n\">i</span> <span class=\"p\">}));</span>\n            <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">Any</span><span class=\"p\">())</span>\n            <span class=\"p\">{</span>\n                <span class=\"kt\">var</span> <span class=\"n\">indexes</span> <span class=\"p\">=</span> <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">Dequeue</span><span class=\"p\">();</span>\n\n                <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">indexes</span><span class=\"p\">.</span><span class=\"n\">Count</span> <span class=\"p\">==</span> <span class=\"n\">n</span><span class=\"p\">)</span>\n                <span class=\"p\">{</span>\n                    <span class=\"n\">permutations</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">indexes</span><span class=\"p\">.</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"p\">=&gt;</span> <span class=\"n\">src</span><span class=\"p\">[</span><span class=\"n\">index</span><span class=\"p\">]).</span><span class=\"nf\">ToList</span><span class=\"p\">());</span>\n                    <span class=\"k\">continue</span><span class=\"p\">;</span>\n                <span class=\"p\">}</span>\n\n                <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">index</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">index</span> <span class=\"p\">&lt;</span> <span class=\"n\">len</span><span class=\"p\">;</span> <span class=\"n\">index</span><span class=\"p\">++)</span>\n                <span class=\"p\">{</span>\n                    <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">indexes</span><span class=\"p\">.</span><span class=\"nf\">Contains</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">))</span>\n                    <span class=\"p\">{</span>\n                        <span class=\"k\">continue</span><span class=\"p\">;</span>\n                    <span class=\"p\">}</span>\n\n                    <span class=\"kt\">var</span> <span class=\"n\">newIndexes</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;(</span><span class=\"n\">indexes</span><span class=\"p\">);</span>\n                    <span class=\"n\">newIndexes</span><span class=\"p\">.</span><span class=\"nf\">Add</span><span class=\"p\">(</span><span class=\"n\">index</span><span class=\"p\">);</span>\n                    <span class=\"n\">queue</span><span class=\"p\">.</span><span class=\"nf\">Enqueue</span><span class=\"p\">(</span><span class=\"n\">newIndexes</span><span class=\"p\">);</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">}</span>\n\n            <span class=\"k\">return</span> <span class=\"n\">permutations</span><span class=\"p\">;</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<ul>\n<li>\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306e\u5e83\u5927\u306a\u6d77\u3067\u8abf\u3079\u3066\u307f\u308b\u3068\u3001\u518d\u5e30\u3092\u5229\u7528\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3044\u308b\u4f8b\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306fQueue\u3092\u4f7f\u3063\u305f\u5e45\u512a\u5148\u63a2\u7d22\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u518d\u5e30\u306f\u5b9f\u88c5\u304c\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308b\u53cd\u9762\u3001\u6df1\u304f\u306a\u308b\u3068Stack Over Flow\u306a\u3069\u306e\u5236\u5fa1\u304c\u96e3\u3057\u304f\u306a\u308b\u305f\u3081\u3001\u500b\u4eba\u7684\u306b\u306fStack\u3084Queue\u3092\u4f7f\u3046\u307b\u3046\u304c\u500b\u4eba\u7684\u306b\u306f\u597d\u307f\u3067\u3059\u3002</li>\n<li>\u751f\u6210\u3057\u305f\u9806\u5217\u3092\u3059\u3079\u3066\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\u3059\u308b\u305f\u3081\u3001\u9806\u5217\u306e\u6570\u304c\u591a\u304f\u306a\u308b\u3068\u3001\u305d\u308c\u3060\u3051\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u91cf\u304c\u591a\u304f\u306a\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u9806\u5217\u306e\u6570\u304c\u591a\u304f\u306a\u308b\u3053\u3068\u304c\u660e\u3089\u304b\u306a\u5834\u5408\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306a\u5b9f\u88c5\u3067\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u672c\u6765\u306a\u3089\u3070<code>yield return</code>\u3084\u30a4\u30c6\u30ec\u30fc\u30bf\u306a\u3069\u3092\u5229\u7528\u3057\u3001\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u91cf\u3092\u5236\u9650\u3059\u3079\u304d\u3067\u3059\u304c\u3001\u81ea\u5206\u304c\u4f7f\u3046\u5206\u306b\u306f\u554f\u984c\u306a\u3044\u306e\u3067\u3001\u3088\u3057\u3068\u3057\u307e\u3059(\u00b4\u30fb\u03c9\u30fb\uff40)</li>\n</ul>\n\n<p>\u6700\u5f8c\u306b\u4f7f\u7528\u65b9\u6cd5\u30922\u3064\u793a\u3057\u3066\u7d42\u308f\u308a\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u305a\u3072\u3068\u3064\u3081\u3002</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><span class=\"kt\">var</span> <span class=\"n\">src</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">string</span><span class=\"p\">&gt;()</span> <span class=\"p\">{</span> <span class=\"s\">\"A\"</span><span class=\"p\">,</span> <span class=\"s\">\"B\"</span><span class=\"p\">,</span> <span class=\"s\">\"C\"</span><span class=\"p\">,</span> <span class=\"s\">\"D\"</span><span class=\"p\">,</span> <span class=\"s\">\"E\"</span> <span class=\"p\">};</span>\n<span class=\"kt\">var</span> <span class=\"n\">permutations</span> <span class=\"p\">=</span> <span class=\"nf\">Permutations</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"m\">3</span><span class=\"p\">);</span>\n<span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"p\">=</span> <span class=\"m\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"p\">&lt;</span> <span class=\"n\">permutations</span><span class=\"p\">.</span><span class=\"n\">Count</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"p\">+=</span> <span class=\"m\">5</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"p\">=</span> <span class=\"n\">Math</span><span class=\"p\">.</span><span class=\"nf\">Min</span><span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"p\">+</span> <span class=\"m\">4</span><span class=\"p\">,</span> <span class=\"n\">permutations</span><span class=\"p\">.</span><span class=\"n\">Count</span><span class=\"p\">);</span>\n    <span class=\"kt\">var</span> <span class=\"n\">tokens</span> <span class=\"p\">=</span> <span class=\"n\">permutations</span><span class=\"p\">.</span><span class=\"nf\">GetRange</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"p\">-</span> <span class=\"n\">i</span> <span class=\"p\">+</span> <span class=\"m\">1</span><span class=\"p\">).</span><span class=\"nf\">Select</span><span class=\"p\">(</span><span class=\"n\">permutation</span> <span class=\"p\">=&gt;</span> <span class=\"s\">\"[\"</span> <span class=\"p\">+</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Join</span><span class=\"p\">(</span><span class=\"s\">\",\"</span><span class=\"p\">,</span> <span class=\"n\">permutation</span><span class=\"p\">)</span> <span class=\"p\">+</span> <span class=\"s\">\"]\"</span><span class=\"p\">);</span>\n    <span class=\"kt\">var</span> <span class=\"n\">line</span> <span class=\"p\">=</span> <span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Join</span><span class=\"p\">(</span><span class=\"s\">\" \"</span><span class=\"p\">,</span> <span class=\"n\">tokens</span><span class=\"p\">);</span>\n    <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5024\u304c\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>[A,B,C] [A,B,D] [A,B,E] [A,C,B] [A,C,D]\n[A,C,E] [A,D,B] [A,D,C] [A,D,E] [A,E,B]\n[A,E,C] [A,E,D] [B,A,C] [B,A,D] [B,A,E]\n[B,C,A] [B,C,D] [B,C,E] [B,D,A] [B,D,C]\n[B,D,E] [B,E,A] [B,E,C] [B,E,D] [C,A,B]\n[C,A,D] [C,A,E] [C,B,A] [C,B,D] [C,B,E]\n[C,D,A] [C,D,B] [C,D,E] [C,E,A] [C,E,B]\n[C,E,D] [D,A,B] [D,A,C] [D,A,E] [D,B,A]\n[D,B,C] [D,B,E] [D,C,A] [D,C,B] [D,C,E]\n[D,E,A] [D,E,B] [D,E,C] [E,A,B] [E,A,C]\n[E,A,D] [E,B,A] [E,B,C] [E,B,D] [E,C,A]\n[E,C,B] [E,C,D] [E,D,A] [E,D,B] [E,D,C]\n</pre></div></div>\n\n<p>2\u3064\u76ee\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3082\u3046\u3061\u3087\u3063\u3068\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002</p>\n\n<div class=\"code-frame\" data-lang=\"csharp\"><div class=\"highlight\"><pre><span class=\"kt\">var</span> <span class=\"n\">src</span> <span class=\"p\">=</span> <span class=\"k\">new</span> <span class=\"n\">List</span><span class=\"p\">&lt;</span><span class=\"kt\">int</span><span class=\"p\">&gt;()</span> <span class=\"p\">{</span> <span class=\"m\">1</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">,</span> <span class=\"m\">3</span><span class=\"p\">,</span> <span class=\"m\">4</span> <span class=\"p\">};</span>\n<span class=\"k\">foreach</span> <span class=\"p\">(</span><span class=\"kt\">var</span> <span class=\"n\">permutation</span> <span class=\"k\">in</span> <span class=\"nf\">Permutations</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"m\">2</span><span class=\"p\">))</span>\n<span class=\"p\">{</span>\n    <span class=\"n\">Console</span><span class=\"p\">.</span><span class=\"nf\">WriteLine</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">.</span><span class=\"nf\">Join</span><span class=\"p\">(</span><span class=\"s\">\",\"</span><span class=\"p\">,</span> <span class=\"n\">permutation</span><span class=\"p\">));</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<p>\u3053\u306e\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>1,2\n1,3\n1,4\n2,1\n2,3\n2,4\n3,1\n3,2\n3,4\n4,1\n4,2\n4,3\n</pre></div></div>\n", "body": "\u30b5\u30a4\u30ba$n$\u306e\u9806\u5217\u3092\u3059\u3079\u3066\u751f\u6210\u3059\u308b\u51e6\u7406\u3092C#\u3067\u5b9f\u88c5\u3059\u308b\u6a5f\u4f1a\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u30e1\u30e2\u306b\u306a\u308a\u307e\u3059\u3002Ruby\u3084Python\u3060\u3068\u9806\u5217\u306e\u5217\u6319\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u3075\u3060\u3093\u306f\u305d\u3046\u3044\u3046\u300c\u51fa\u6765\u5408\u3044\u300d\u306e\u3082\u306e\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3001\u81ea\u529b\u3067\u5b9f\u88c5\u3059\u308b\u306e\u306b\u601d\u3063\u305f\u3088\u308a\u3082\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3063\u305f(\u00b4\u30fb\u03c9\u30fb\uff40)\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace permutations\n{\n    class Program\n    {\n        static List<List<T>> Permutations<T>(List<T> src, int n)\n        {\n            // n\u306f1\u4ee5\u4e0a\u304b\u3064src\u306e\u9577\u3055\u3088\u308a\u3082\u77ed\u3044\u5fc5\u8981\u304c\u3042\u308b\u3002\n            int len = src.Count;\n            if (!(0 < n && n <= len))\n            {\n                throw new ArgumentOutOfRangeException();\n            }\n\n            var permutations = new List<List<T>>();\n            var queue = new Queue<List<int>>(Enumerable.Range(0, len).Select(i => new List<int>() { i }));\n            while (queue.Any())\n            {\n                var indexes = queue.Dequeue();\n\n                if (indexes.Count == n)\n                {\n                    permutations.Add(indexes.Select(index => src[index]).ToList());\n                    continue;\n                }\n                \n                for (int index = 0; index < len; index++)\n                {\n                    if (indexes.Contains(index))\n                    {\n                        continue;\n                    }\n\n                    var newIndexes = new List<int>(indexes);\n                    newIndexes.Add(index);\n                    queue.Enqueue(newIndexes);\n                }\n            }\n\n            return permutations;\n        }\n    }\n}\n```\n\n- \u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306e\u5e83\u5927\u306a\u6d77\u3067\u8abf\u3079\u3066\u307f\u308b\u3068\u3001\u518d\u5e30\u3092\u5229\u7528\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3044\u308b\u4f8b\u304c\u591a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306fQueue\u3092\u4f7f\u3063\u305f\u5e45\u512a\u5148\u63a2\u7d22\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u518d\u5e30\u306f\u5b9f\u88c5\u304c\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308b\u53cd\u9762\u3001\u6df1\u304f\u306a\u308b\u3068Stack Over Flow\u306a\u3069\u306e\u5236\u5fa1\u304c\u96e3\u3057\u304f\u306a\u308b\u305f\u3081\u3001\u500b\u4eba\u7684\u306b\u306fStack\u3084Queue\u3092\u4f7f\u3046\u307b\u3046\u304c\u500b\u4eba\u7684\u306b\u306f\u597d\u307f\u3067\u3059\u3002\n- \u751f\u6210\u3057\u305f\u9806\u5217\u3092\u3059\u3079\u3066\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\u3059\u308b\u305f\u3081\u3001\u9806\u5217\u306e\u6570\u304c\u591a\u304f\u306a\u308b\u3068\u3001\u305d\u308c\u3060\u3051\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u91cf\u304c\u591a\u304f\u306a\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u9806\u5217\u306e\u6570\u304c\u591a\u304f\u306a\u308b\u3053\u3068\u304c\u660e\u3089\u304b\u306a\u5834\u5408\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306a\u5b9f\u88c5\u3067\u306f\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\u672c\u6765\u306a\u3089\u3070`yield return`\u3084\u30a4\u30c6\u30ec\u30fc\u30bf\u306a\u3069\u3092\u5229\u7528\u3057\u3001\u30e1\u30e2\u30ea\u306e\u6d88\u8cbb\u91cf\u3092\u5236\u9650\u3059\u3079\u304d\u3067\u3059\u304c\u3001\u81ea\u5206\u304c\u4f7f\u3046\u5206\u306b\u306f\u554f\u984c\u306a\u3044\u306e\u3067\u3001\u3088\u3057\u3068\u3057\u307e\u3059(\u00b4\u30fb\u03c9\u30fb\uff40)\n\n\u6700\u5f8c\u306b\u4f7f\u7528\u65b9\u6cd5\u30922\u3064\u793a\u3057\u3066\u7d42\u308f\u308a\u306b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u305a\u3072\u3068\u3064\u3081\u3002\n\n```csharp\nvar src = new List<string>() { \"A\", \"B\", \"C\", \"D\", \"E\" };\nvar permutations = Permutations(src, 3);\nfor (int i = 0; i < permutations.Count; i += 5)\n{\n    int j = Math.Min(i + 4, permutations.Count);\n    var tokens = permutations.GetRange(i, j - i + 1).Select(permutation => \"[\" + string.Join(\",\", permutation) + \"]\");\n    var line = string.Join(\" \", tokens);\n    Console.WriteLine(line);\n}\n```\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5024\u304c\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n```\n[A,B,C] [A,B,D] [A,B,E] [A,C,B] [A,C,D]\n[A,C,E] [A,D,B] [A,D,C] [A,D,E] [A,E,B]\n[A,E,C] [A,E,D] [B,A,C] [B,A,D] [B,A,E]\n[B,C,A] [B,C,D] [B,C,E] [B,D,A] [B,D,C]\n[B,D,E] [B,E,A] [B,E,C] [B,E,D] [C,A,B]\n[C,A,D] [C,A,E] [C,B,A] [C,B,D] [C,B,E]\n[C,D,A] [C,D,B] [C,D,E] [C,E,A] [C,E,B]\n[C,E,D] [D,A,B] [D,A,C] [D,A,E] [D,B,A]\n[D,B,C] [D,B,E] [D,C,A] [D,C,B] [D,C,E]\n[D,E,A] [D,E,B] [D,E,C] [E,A,B] [E,A,C]\n[E,A,D] [E,B,A] [E,B,C] [E,B,D] [E,C,A]\n[E,C,B] [E,C,D] [E,D,A] [E,D,B] [E,D,C]\n```\n\n2\u3064\u76ee\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3082\u3046\u3061\u3087\u3063\u3068\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n```csharp\nvar src = new List<int>() { 1, 2, 3, 4 };\nforeach (var permutation in Permutations(src, 2))\n{\n    Console.WriteLine(string.Join(\",\", permutation));\n}\n```\n\u3053\u306e\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n```\n1,2\n1,3\n1,4\n2,1\n2,3\n2,4\n3,1\n3,2\n3,4\n4,1\n4,2\n4,3\n```\n", "coediting": false, "comments_count": 1, "created_at": "2018-11-20T23:49:27+09:00", "group": null, "id": "e6a931b8a9193b47fcd3", "likes_count": 2, "private": false, "reactions_count": 0, "tags": [{"name": "C#", "versions": []}], "title": "C#\u3067\u30b5\u30a4\u30ban\u306e\u9806\u5217\u3092\u3059\u3079\u3066\u751f\u6210\u3057\u305f\u3044\u3002", "updated_at": "2018-11-20T23:49:27+09:00", "url": "https://qiita.com/neko_the_shadow/items/e6a931b8a9193b47fcd3", "user": {"description": "\u3044\u307e\u307e\u3067\u4f7f\u3063\u3066\u3044\u305f\u306f\u3066\u306a\u30d6\u30ed\u30b0\u304c\u3001\u63a8\u7406\u5c0f\u8aac\u3084\u5192\u967a\u5c0f\u8aac\u4e2d\u5fc3\u306e\u66f8\u8a55\u30d6\u30ed\u30b0\u3068\u5316\u3057\u305f\u306e\u3067\u3001\u6280\u8853\u7684\u5185\u5bb9\u306f\u3053\u3061\u3089\u3078\u5f15\u3063\u8d8a\u3057\u3066\u304d\u307e\u3057\u305f(\u00b4\u30fb\u03c9\u30fb`)", "facebook_id": "", "followees_count": 0, "followers_count": 21, "github_login_name": null, "id": "neko_the_shadow", "items_count": 124, "linkedin_id": "", "location": "\u795e\u5948\u5ddd\u770c\u5ddd\u5d0e\u5e02", "name": "", "organization": "", "permanent_id": 105859, "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753", "team_only": false, "twitter_screen_name": "neko_the_shadow", "website_url": "https://nekotheshadow.github.io/"}, "page_views_count": null}
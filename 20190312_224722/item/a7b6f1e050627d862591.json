{"rendered_body": "<p>\u5148\u65e5\u30cd\u30c3\u30c8\u30b5\u30fc\u30d5\u30a3\u30f3\u4e2d\u306b\u6b21\u306e\u3088\u3046\u306a\u8a18\u4e8b\u3092\u898b\u3064\u3051\u307e\u3057\u305f: <a href=\"http://gigazine.net/news/20100822_hardest_sudoku/\" rel=\"nofollow noopener\" target=\"_blank\">\u300c\u6570\u5b66\u306e\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u304c3\u30f6\u6708\u304b\u3051\u3066\u4f5c\u6210\u3057\u305f\u300c\u4e16\u754c\u4e00\u96e3\u3057\u3044\u6570\u72ec\u300d\u300d</a>\u3002\u4e8b\u5b9f\u304b\u3069\u3046\u304b\u306f\u3068\u3082\u304b\u304f\u3001Python3\u3067\u3053\u308c\u3092\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\u306a\u304a\u5b9f\u88c5\u3068\u3057\u3066\u306f\u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af\u6cd5\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u8981\u3059\u308b\u306b\u529b\u4efb\u305b\u306b\u89e3\u3044\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d(\u00b4\u30fb\u03c9\u30fb`)</p>\n\n<div class=\"code-frame\" data-lang=\"py3\"><div class=\"highlight\"><pre>\n<span class=\"kn\">import</span> <span class=\"nn\">itertools</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Sudoku</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"mi\">0</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)]</span> <span class=\"c\"># \u7a7a\u767d\u306e\u5834\u5408\u306f0</span>\n\n    <span class=\"c\"># \u4e0e\u3048\u3089\u308c\u305f\u6570\u72ec\u30d1\u30ba\u30eb\u3092\u89e3\u304f</span>\n    <span class=\"c\"># \u7a7a\u767d\u306e\u30de\u30b9\u3092\u6b21\u3005\u3068\u57cb\u3081\u3066\u3044\u304d\u3001\u3059\u3079\u3066\u306e\u7a7a\u767d\u30de\u30b9\u3092\u57cb\u3081\u305f\u5834\u5408\u306fTrue\u3092\u8fd4\u3059(\u57cb\u3081\u3089\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u306fFalse)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">solve</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c\"># \u6d88\u53bb\u6cd5: \u305f\u3060\u3072\u3068\u3064\u306b\u6c7a\u307e\u308b\u30de\u30b9\u3092\u57cb\u3081\u3066\u3044\u304f</span>\n        <span class=\"k\">while</span> <span class=\"bp\">True</span><span class=\"p\">:</span>\n            <span class=\"n\">ls</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n                <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n\n                <span class=\"n\">numbers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__find_numbers</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span>\n                <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">numbers</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"n\">ls</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">numbers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ls</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"k\">break</span>\n            <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">,</span> <span class=\"n\">number</span> <span class=\"ow\">in</span> <span class=\"n\">ls</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">number</span>\n\n\n        <span class=\"n\">blanks</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">blanks</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"bp\">True</span> <span class=\"c\"># \u3059\u3067\u306b\u3059\u3079\u3066\u306e\u30de\u30b9\u304c\u57cb\u3081\u3089\u308c\u3066\u3044\u308b\u5834\u5408</span>\n\n        <span class=\"n\">first_i</span><span class=\"p\">,</span> <span class=\"n\">first_j</span> <span class=\"o\">=</span> <span class=\"n\">blanks</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"p\">[(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">first_number</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">first_number</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__find_numbers</span><span class=\"p\">(</span><span class=\"n\">first_i</span><span class=\"p\">,</span> <span class=\"n\">first_j</span><span class=\"p\">)]</span>\n\n        <span class=\"c\"># \u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af\u6cd5:</span>\n        <span class=\"c\">#     1. \u7a7a\u767d\u306e\u30de\u30b9\u306b\u6570\u5b57\u3092\u5165\u308c\u308b</span>\n        <span class=\"c\">#     2. \u6b21\u306e\u7a7a\u767d\u306e\u30de\u30b9\u306b\u6570\u5b57\u304c\u5165\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b</span>\n        <span class=\"c\">#     3. 2.\u306b\u304a\u3044\u3066\u3001\u5165\u3089\u306a\u3044\u5834\u5408\u306f\u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af</span>\n        <span class=\"k\">while</span> <span class=\"n\">stack</span><span class=\"p\">:</span>\n            <span class=\"n\">idx</span><span class=\"p\">,</span> <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n            <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">blanks</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">number</span>\n\n            <span class=\"k\">if</span> <span class=\"n\">idx</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">blanks</span><span class=\"p\">)</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">:</span> <span class=\"k\">return</span> <span class=\"bp\">True</span>\n\n            <span class=\"n\">next_i</span><span class=\"p\">,</span> <span class=\"n\">next_j</span> <span class=\"o\">=</span> <span class=\"n\">blanks</span><span class=\"p\">[</span><span class=\"n\">idx</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">next_numbers</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">__find_numbers</span><span class=\"p\">(</span><span class=\"n\">next_i</span><span class=\"p\">,</span> <span class=\"n\">next_j</span><span class=\"p\">)</span>\n\n            <span class=\"c\"># \u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af</span>\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">next_numbers</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"n\">stack_top_idx</span> <span class=\"o\">=</span> <span class=\"n\">stack</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"k\">for</span> <span class=\"n\">temp_idx</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">stack_top_idx</span><span class=\"p\">,</span> <span class=\"n\">idx</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">):</span>\n                    <span class=\"n\">temp_i</span><span class=\"p\">,</span> <span class=\"n\">temp_j</span> <span class=\"o\">=</span> <span class=\"n\">blanks</span><span class=\"p\">[</span><span class=\"n\">temp_idx</span><span class=\"p\">]</span>\n                    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">temp_i</span><span class=\"p\">][</span><span class=\"n\">temp_j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n            <span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">((</span><span class=\"n\">idx</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">next_number</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">next_number</span> <span class=\"ow\">in</span> <span class=\"n\">next_numbers</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"bp\">False</span>\n\n    <span class=\"c\"># \u3068\u3042\u308b\u30de\u30b9\u306b\u5165\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u6570\u5b57\u3092set\u306b\u683c\u7d0d\u3059\u308b</span>\n    <span class=\"k\">def</span> <span class=\"nf\">__find_numbers</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">):</span>\n        <span class=\"n\">used_numbers</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">()</span>\n        <span class=\"c\"># \u540c\u3058\u884c\u3068\u540c\u3058\u5217\u3092\u8abf\u3079\u308b</span>\n        <span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">):</span> <span class=\"n\">used_numbers</span> <span class=\"o\">|=</span> <span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">x</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">x</span><span class=\"p\">]}</span>\n\n        <span class=\"c\"># \u540c\u3058\u30d6\u30ed\u30c3\u30af\u3092\u8abf\u3079\u308b</span>\n        <span class=\"n\">box_i_min</span><span class=\"p\">,</span> <span class=\"n\">box_j_min</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">//</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">j</span> <span class=\"o\">//</span> <span class=\"mi\">3</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">3</span>\n        <span class=\"k\">for</span> <span class=\"n\">box_i</span><span class=\"p\">,</span> <span class=\"n\">box_j</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">box_i_min</span><span class=\"p\">,</span> <span class=\"n\">box_i_min</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">),</span> \\\n                                              <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">box_j_min</span><span class=\"p\">,</span> <span class=\"n\">box_j_min</span> <span class=\"o\">+</span> <span class=\"mi\">3</span><span class=\"p\">)):</span>\n            <span class=\"n\">used_numbers</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">box_i</span><span class=\"p\">][</span><span class=\"n\">box_j</span><span class=\"p\">])</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">))</span> <span class=\"o\">-</span> <span class=\"n\">used_numbers</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s\">\"</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">))</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"s\">'''\n        ..53.....\n        8......2.\n        .7..1.5..\n        4....53..\n        .1..7...6\n        ..32....8.\n        .6.5....9\n        ..4....3.\n        .....97..\n    '''</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n\n    <span class=\"n\">sudoku</span> <span class=\"o\">=</span> <span class=\"n\">Sudoku</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span> <span class=\"ow\">in</span> <span class=\"n\">itertools</span><span class=\"o\">.</span><span class=\"n\">product</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">),</span> <span class=\"n\">repeat</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s\">\".\"</span><span class=\"p\">:</span> <span class=\"k\">continue</span>\n        <span class=\"n\">sudoku</span><span class=\"o\">.</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span>\n\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sudoku</span><span class=\"p\">)</span>\n    <span class=\"n\">sudoku</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">()</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"s\">\"========\"</span><span class=\"p\">)</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">sudoku</span><span class=\"p\">)</span>\n\n\n<span class=\"c\"># 005300000</span>\n<span class=\"c\"># 800000020</span>\n<span class=\"c\"># 070010500</span>\n<span class=\"c\"># 400005300</span>\n<span class=\"c\"># 010070006</span>\n<span class=\"c\"># 003200080</span>\n<span class=\"c\"># 060500009</span>\n<span class=\"c\"># 004000030</span>\n<span class=\"c\"># 000009700</span>\n<span class=\"c\"># =========</span>\n<span class=\"c\"># 145327698</span>\n<span class=\"c\"># 839654127</span>\n<span class=\"c\"># 672918543</span>\n<span class=\"c\"># 496185372</span>\n<span class=\"c\"># 218473956</span>\n<span class=\"c\"># 753296481</span>\n<span class=\"c\"># 367542819</span>\n<span class=\"c\"># 984761235</span>\n<span class=\"c\"># 521839764</span>\n</pre></div></div>\n\n<p>GIGAZINE\u3068\u540c\u3058\u7b54\u3048\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u5927\u4e08\u592b\u3067\u3057\u3087\u3046(\uff40\u30fb\u03c9\u30fb\u00b4)\uff7c\uff6c\uff77\uff70\uff9d</p>\n", "body": "\u5148\u65e5\u30cd\u30c3\u30c8\u30b5\u30fc\u30d5\u30a3\u30f3\u4e2d\u306b\u6b21\u306e\u3088\u3046\u306a\u8a18\u4e8b\u3092\u898b\u3064\u3051\u307e\u3057\u305f: [\u300c\u6570\u5b66\u306e\u30a8\u30ad\u30b9\u30d1\u30fc\u30c8\u304c3\u30f6\u6708\u304b\u3051\u3066\u4f5c\u6210\u3057\u305f\u300c\u4e16\u754c\u4e00\u96e3\u3057\u3044\u6570\u72ec\u300d\u300d](http://gigazine.net/news/20100822_hardest_sudoku/)\u3002\u4e8b\u5b9f\u304b\u3069\u3046\u304b\u306f\u3068\u3082\u304b\u304f\u3001Python3\u3067\u3053\u308c\u3092\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\u306a\u304a\u5b9f\u88c5\u3068\u3057\u3066\u306f\u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af\u6cd5\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u8981\u3059\u308b\u306b\u529b\u4efb\u305b\u306b\u89e3\u3044\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d(\u00b4\u30fb\u03c9\u30fb`)\n\n```py3\n\nimport itertools\n\nclass Sudoku(object):\n    def __init__(self):\n        self.matrix = [[0 for _ in range(9)] for _ in range(9)] # \u7a7a\u767d\u306e\u5834\u5408\u306f0\n    \n    # \u4e0e\u3048\u3089\u308c\u305f\u6570\u72ec\u30d1\u30ba\u30eb\u3092\u89e3\u304f\n    # \u7a7a\u767d\u306e\u30de\u30b9\u3092\u6b21\u3005\u3068\u57cb\u3081\u3066\u3044\u304d\u3001\u3059\u3079\u3066\u306e\u7a7a\u767d\u30de\u30b9\u3092\u57cb\u3081\u305f\u5834\u5408\u306fTrue\u3092\u8fd4\u3059(\u57cb\u3081\u3089\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u306fFalse)\n    def solve(self):\n        # \u6d88\u53bb\u6cd5: \u305f\u3060\u3072\u3068\u3064\u306b\u6c7a\u307e\u308b\u30de\u30b9\u3092\u57cb\u3081\u3066\u3044\u304f\n        while True:\n            ls = []\n            for i, j in itertools.product(range(9), repeat=2):\n                if self.matrix[i][j] != 0: continue\n\n                numbers = self.__find_numbers(i, j)\n                if len(numbers) == 1: ls.append((i, j, numbers[0]))\n\n            if len(ls) == 0: break\n            for i, j, number in ls: self.matrix[i][j] = number\n\n\n        blanks = [(i, j) for i, j in itertools.product(range(9), repeat=2) if self.matrix[i][j] == 0]\n        if len(blanks) == 0: return True # \u3059\u3067\u306b\u3059\u3079\u3066\u306e\u30de\u30b9\u304c\u57cb\u3081\u3089\u308c\u3066\u3044\u308b\u5834\u5408\n\n        first_i, first_j = blanks[0]\n        stack = [(0, first_number) for first_number in self.__find_numbers(first_i, first_j)]\n\n        # \u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af\u6cd5:\n        #     1. \u7a7a\u767d\u306e\u30de\u30b9\u306b\u6570\u5b57\u3092\u5165\u308c\u308b\n        #     2. \u6b21\u306e\u7a7a\u767d\u306e\u30de\u30b9\u306b\u6570\u5b57\u304c\u5165\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308b\n        #     3. 2.\u306b\u304a\u3044\u3066\u3001\u5165\u3089\u306a\u3044\u5834\u5408\u306f\u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af\n        while stack:\n            idx, number = stack.pop()\n            i, j = blanks[idx]\n            self.matrix[i][j] = number\n\n            if idx == len(blanks) - 1: return True\n\n            next_i, next_j = blanks[idx + 1]\n            next_numbers = self.__find_numbers(next_i, next_j)\n\n            # \u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af\n            if len(next_numbers) == 0:\n                stack_top_idx = stack[-1][0]\n                for temp_idx in range(stack_top_idx, idx + 1):\n                    temp_i, temp_j = blanks[temp_idx]\n                    self.matrix[temp_i][temp_j] = 0\n\n            stack.extend((idx + 1, next_number) for next_number in next_numbers)\n\n        return False\n\n    # \u3068\u3042\u308b\u30de\u30b9\u306b\u5165\u308c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u6570\u5b57\u3092set\u306b\u683c\u7d0d\u3059\u308b\n    def __find_numbers(self, i, j):\n        used_numbers = set()\n        # \u540c\u3058\u884c\u3068\u540c\u3058\u5217\u3092\u8abf\u3079\u308b\n        for x in range(9): used_numbers |= {self.matrix[x][j], self.matrix[i][x]}\n\n        # \u540c\u3058\u30d6\u30ed\u30c3\u30af\u3092\u8abf\u3079\u308b\n        box_i_min, box_j_min = (i // 3) * 3, (j // 3) * 3\n        for box_i, box_j in itertools.product(range(box_i_min, box_i_min + 3), \\\n                                              range(box_j_min, box_j_min + 3)):\n            used_numbers.add(self.matrix[box_i][box_j])\n\n        return set(range(1, 10)) - used_numbers\n\n    def __str__(self):\n        return \"\\n\".join(\"\".join(map(str, row)) for row in self.matrix)\n\nif __name__ == \"__main__\":\n    matrix = '''\n        ..53.....\n        8......2.\n        .7..1.5..\n        4....53..\n        .1..7...6\n        ..32....8.\n        .6.5....9\n        ..4....3.\n        .....97..\n    '''.split()\n\n    sudoku = Sudoku()\n    for i, j in itertools.product(range(9), repeat=2):\n        if matrix[i][j] == \".\": continue\n        sudoku.matrix[i][j] = int(matrix[i][j])\n    \n    print(sudoku)\n    sudoku.solve()\n    print(\"========\")\n    print(sudoku)\n\n\n# 005300000\n# 800000020\n# 070010500\n# 400005300\n# 010070006\n# 003200080\n# 060500009\n# 004000030\n# 000009700\n# =========\n# 145327698\n# 839654127\n# 672918543\n# 496185372\n# 218473956\n# 753296481\n# 367542819\n# 984761235\n# 521839764\n```\n\nGIGAZINE\u3068\u540c\u3058\u7b54\u3048\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u5927\u4e08\u592b\u3067\u3057\u3087\u3046(\uff40\u30fb\u03c9\u30fb\u00b4)\uff7c\uff6c\uff77\uff70\uff9d\n", "coediting": false, "comments_count": 0, "created_at": "2016-07-23T23:06:08+09:00", "group": null, "id": "a7b6f1e050627d862591", "likes_count": 4, "private": false, "reactions_count": 0, "tags": [{"name": "Python", "versions": []}, {"name": "Python3", "versions": []}], "title": "\u6570\u72ec\u30bd\u30eb\u30d0\u30fc\u3092Python3\u3067\u5b9f\u88c5", "updated_at": "2016-07-23T23:07:03+09:00", "url": "https://qiita.com/neko_the_shadow/items/a7b6f1e050627d862591", "user": {"description": "\u3044\u307e\u307e\u3067\u4f7f\u3063\u3066\u3044\u305f\u306f\u3066\u306a\u30d6\u30ed\u30b0\u304c\u3001\u63a8\u7406\u5c0f\u8aac\u3084\u5192\u967a\u5c0f\u8aac\u4e2d\u5fc3\u306e\u66f8\u8a55\u30d6\u30ed\u30b0\u3068\u5316\u3057\u305f\u306e\u3067\u3001\u6280\u8853\u7684\u5185\u5bb9\u306f\u3053\u3061\u3089\u3078\u5f15\u3063\u8d8a\u3057\u3066\u304d\u307e\u3057\u305f(\u00b4\u30fb\u03c9\u30fb`)", "facebook_id": "", "followees_count": 0, "followers_count": 21, "github_login_name": null, "id": "neko_the_shadow", "items_count": 124, "linkedin_id": "", "location": "\u795e\u5948\u5ddd\u770c\u5ddd\u5d0e\u5e02", "name": "", "organization": "", "permanent_id": 105859, "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753", "team_only": false, "twitter_screen_name": "neko_the_shadow", "website_url": "https://nekotheshadow.github.io/"}, "page_views_count": null}
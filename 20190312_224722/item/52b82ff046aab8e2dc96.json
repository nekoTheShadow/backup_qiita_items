{"rendered_body": "<p><a href=\"https://codeiq.jp/q/3539\" rel=\"nofollow noopener\" target=\"_blank\">CodeIQ\u300c\u9032\u6357\u30b8\u30a8\u30f3\u30c9\u30de\u30fc\u30af\u300d</a>\u306e\u516c\u958b\u671f\u9650\u304c\u7d42\u4e86\u3057\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u81ea\u5206\u306e\u89e3\u7b54\u3092\u3055\u3089\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059(\u00b4\u30fb\u03c9\u30fb\uff40) \u306a\u304aCodeIQ\u306f\u305d\u306e\u30b5\u30fc\u30d3\u30b9\u306e\u6027\u8cea\u4e0a\u3001\u89e3\u7b54\u306e\u516c\u958b\u306f\u539f\u5247\u7981\u6b62\u3067\u3059\u304c\u3001\u672c\u554f\u306b\u3064\u3044\u3066\u306f<a href=\"https://twitter.com/tbpgr/status/967443014950961152\" rel=\"nofollow noopener\" target=\"_blank\">\u51fa\u984c\u8005\u306e@tbpgr\u3055\u3093\u306e\u8a31\u53ef</a>\u306e\u3082\u3068\u3001\u89e3\u7b54\u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002</p>\n\n<p>\u3055\u3066\u300c\u9032\u6357\u30b8\u30a8\u30f3\u30c9\u30de\u30fc\u30af\u300d\u306f\u304a\u304a\u3088\u305d\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u554f\u984c\u3067\u3057\u305f\u3002</p>\n\n<ul>\n<li>\u6a19\u6e96\u5165\u529b\u304b\u30891\u304b\u3089100\u307e\u3067\u306e\u6574\u6570\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\u3053\u308c\u3092n\u3068\u3059\u308b\u3002</li>\n<li>n\u304c\u5076\u6570\u306e\u5834\u5408\u306finvalid\u3092\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3059\u308b\u3002</li>\n<li>n\u304c\u5947\u6570\u306e\u5834\u5408\u306f\u300c\u9032\u6357\u30b8\u30a8\u30f3\u30c9\u30de\u30fc\u30af\u300d\u3092\u51fa\u529b\u3059\u308b\u3002\n\n<ul>\n<li>n\u00d7n\u306e\u6b63\u65b9\u5f62\u306b\u534a\u89d2\u5c0f\u6587\u5b57\u306ej\u3067J\u3092\u63cf\u304f\u3002\n\n<ul>\n<li>\u53f3\u8fba\u3068\u4e0b\u8fba\u306f\u3059\u3079\u3066j\u3067\u57cb\u3081\u308b\u3002</li>\n<li>\u5de6\u8fba\u306f\u4e0b\u534a\u5206\u3092\u3059\u3079\u3066j\u3067\u57cb\u3081\u308b\u3002</li>\n<li>\u6b8b\u308a\u306f\u3059\u3079\u3066.\u3067\u57cb\u3081\u308b\u3002</li>\n</ul>\n</li>\n<li>\u5177\u4f53\u4f8b\u306f\u4ee5\u4e0b\u306e<code>test</code>\u30e1\u30bd\u30c3\u30c9\u3092\u53c2\u7167\u3002</li>\n</ul>\n</li>\n</ul>\n\n<p>\u89e3\u7b54\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\u8a00\u8a9e\u306fPython3\u3067\u4e00\u767a\u5408\u683c\u3067\u3057\u305f(\uff40\u30fb\u03c9\u30fb\u00b4)\uff7c\uff6c\uff77\uff70\uff9d \u5b9f\u969b\u306e\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af(?)\u3088\u308a\u3082\u30c6\u30b9\u30c8\u7528\u306e\u30b3\u30fc\u30c9\u306e\u307b\u3046\u304c\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u306f\u5185\u7dd2\u3002\u3088\u3044\u3053\u306e\u307f\u3093\u306a\u306f\u304d\u3061\u3093\u3068<a href=\"https://docs.python.jp/3/library/unittest.html\" rel=\"nofollow noopener\" target=\"_blank\">unittest</a>\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u2026\u3002</p>\n\n<div class=\"code-frame\" data-lang=\"python\"><div class=\"highlight\"><pre><span class=\"k\">def</span> <span class=\"nf\">draw</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">n</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s\">'invalid'</span>\n\n    <span class=\"n\">matrix</span> <span class=\"o\">=</span> <span class=\"p\">[[</span><span class=\"s\">'.'</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">n</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">'j'</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">n</span> <span class=\"o\">//</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"p\">):</span>\n        <span class=\"n\">matrix</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s\">'j'</span>\n\n    <span class=\"k\">return</span> <span class=\"s\">'</span><span class=\"se\">\\n</span><span class=\"s\">'</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s\">''</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">matrix</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">test</span><span class=\"p\">():</span>\n    <span class=\"n\">expects</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"mi\">1</span> <span class=\"p\">:</span> <span class=\"s\">'j'</span><span class=\"p\">,</span>\n        <span class=\"mi\">2</span> <span class=\"p\">:</span> <span class=\"s\">'invalid'</span><span class=\"p\">,</span>\n        <span class=\"mi\">3</span> <span class=\"p\">:</span> <span class=\"s\">\"\"\"\n          ..j\n          ..j\n          jjj\n        \"\"\"</span><span class=\"p\">,</span>\n        <span class=\"mi\">5</span> <span class=\"p\">:</span> <span class=\"s\">\"\"\"\n          ....j\n          ....j\n          ....j\n          j...j\n          jjjjj\n        \"\"\"</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">expects</span><span class=\"p\">:</span>\n        <span class=\"n\">expected</span> <span class=\"o\">=</span> <span class=\"n\">expects</span><span class=\"p\">[</span><span class=\"n\">n</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s\">' '</span><span class=\"p\">,</span> <span class=\"s\">''</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>\n        <span class=\"n\">actual</span> <span class=\"o\">=</span> <span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">expected</span> <span class=\"o\">==</span> <span class=\"n\">actual</span><span class=\"p\">,</span> <span class=\"s\">'expected: {0}, actual: {1}'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">expected</span><span class=\"p\">,</span> <span class=\"n\">actual</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">__name__</span> <span class=\"o\">==</span> <span class=\"s\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">())</span>\n    <span class=\"k\">print</span><span class=\"p\">(</span><span class=\"n\">draw</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">))</span>\n\n    <span class=\"c\"># test()</span>\n</pre></div></div>\n\n<p>\u53c2\u8003:</p>\n\n<ul>\n<li><a href=\"https://codeiq.jp/q/3539\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://codeiq.jp/q/3539</a></li>\n<li><a href=\"https://togetter.com/li/1193329\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://togetter.com/li/1193329</a></li>\n<li><a href=\"http://tbpgr.hatenablog.com/entry/2018/02/25/215356\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://tbpgr.hatenablog.com/entry/2018/02/25/215356</a></li>\n</ul>\n", "body": "[CodeIQ\u300c\u9032\u6357\u30b8\u30a8\u30f3\u30c9\u30de\u30fc\u30af\u300d](https://codeiq.jp/q/3539)\u306e\u516c\u958b\u671f\u9650\u304c\u7d42\u4e86\u3057\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u81ea\u5206\u306e\u89e3\u7b54\u3092\u3055\u3089\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059(\u00b4\u30fb\u03c9\u30fb\uff40) \u306a\u304aCodeIQ\u306f\u305d\u306e\u30b5\u30fc\u30d3\u30b9\u306e\u6027\u8cea\u4e0a\u3001\u89e3\u7b54\u306e\u516c\u958b\u306f\u539f\u5247\u7981\u6b62\u3067\u3059\u304c\u3001\u672c\u554f\u306b\u3064\u3044\u3066\u306f[\u51fa\u984c\u8005\u306e@tbpgr\u3055\u3093\u306e\u8a31\u53ef](https://twitter.com/tbpgr/status/967443014950961152)\u306e\u3082\u3068\u3001\u89e3\u7b54\u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3055\u3066\u300c\u9032\u6357\u30b8\u30a8\u30f3\u30c9\u30de\u30fc\u30af\u300d\u306f\u304a\u304a\u3088\u305d\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u554f\u984c\u3067\u3057\u305f\u3002\n\n- \u6a19\u6e96\u5165\u529b\u304b\u30891\u304b\u3089100\u307e\u3067\u306e\u6574\u6570\u304c\u4e0e\u3048\u3089\u308c\u308b\u3002\u3053\u308c\u3092n\u3068\u3059\u308b\u3002\n- n\u304c\u5076\u6570\u306e\u5834\u5408\u306finvalid\u3092\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3059\u308b\u3002\n- n\u304c\u5947\u6570\u306e\u5834\u5408\u306f\u300c\u9032\u6357\u30b8\u30a8\u30f3\u30c9\u30de\u30fc\u30af\u300d\u3092\u51fa\u529b\u3059\u308b\u3002\n    - n\u00d7n\u306e\u6b63\u65b9\u5f62\u306b\u534a\u89d2\u5c0f\u6587\u5b57\u306ej\u3067J\u3092\u63cf\u304f\u3002\n        - \u53f3\u8fba\u3068\u4e0b\u8fba\u306f\u3059\u3079\u3066j\u3067\u57cb\u3081\u308b\u3002\n        - \u5de6\u8fba\u306f\u4e0b\u534a\u5206\u3092\u3059\u3079\u3066j\u3067\u57cb\u3081\u308b\u3002\n        - \u6b8b\u308a\u306f\u3059\u3079\u3066.\u3067\u57cb\u3081\u308b\u3002\n    - \u5177\u4f53\u4f8b\u306f\u4ee5\u4e0b\u306e`test`\u30e1\u30bd\u30c3\u30c9\u3092\u53c2\u7167\u3002\n\n\u89e3\u7b54\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\u8a00\u8a9e\u306fPython3\u3067\u4e00\u767a\u5408\u683c\u3067\u3057\u305f(\uff40\u30fb\u03c9\u30fb\u00b4)\uff7c\uff6c\uff77\uff70\uff9d \u5b9f\u969b\u306e\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af(?)\u3088\u308a\u3082\u30c6\u30b9\u30c8\u7528\u306e\u30b3\u30fc\u30c9\u306e\u307b\u3046\u304c\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u306f\u5185\u7dd2\u3002\u3088\u3044\u3053\u306e\u307f\u3093\u306a\u306f\u304d\u3061\u3093\u3068[unittest](https://docs.python.jp/3/library/unittest.html)\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u2026\u3002\n\n```python\ndef draw(n):\n    if n % 2 == 0:\n        return 'invalid'\n\n    matrix = [['.' for _ in range(n)] for _ in range(n)]\n    for i in range(n):\n        matrix[n - 1][i] = matrix[i][n - 1] = 'j'\n    for i in range(n // 2 + 1, n):\n        matrix[i][0] = 'j'\n\n    return '\\n'.join(''.join(row) for row in matrix)\n\ndef test():\n    expects = {\n        1 : 'j',\n        2 : 'invalid',\n        3 : \"\"\"\n          ..j\n          ..j\n          jjj\n        \"\"\",\n        5 : \"\"\"\n          ....j\n          ....j\n          ....j\n          j...j\n          jjjjj\n        \"\"\"\n    }\n    for n in expects:\n        expected = expects[n].replace(' ', '').strip()\n        actual = draw(n)\n        assert expected == actual, 'expected: {0}, actual: {1}'.format(expected, actual)\n\n\nif __name__ == '__main__':\n    n = int(input())\n    print(draw(n))\n\n    # test()\n```\n\n\u53c2\u8003:\n\n- https://codeiq.jp/q/3539\n- https://togetter.com/li/1193329\n- http://tbpgr.hatenablog.com/entry/2018/02/25/215356\n", "coediting": false, "comments_count": 0, "created_at": "2018-02-25T22:17:24+09:00", "group": null, "id": "52b82ff046aab8e2dc96", "likes_count": 1, "private": false, "reactions_count": 0, "tags": [{"name": "codeiq", "versions": []}, {"name": "Python3", "versions": []}], "title": "CodeIQ\u300c\u9032\u6357\u30b8\u30a8\u30f3\u30c9\u30de\u30fc\u30af\u300d\u306b\u53c2\u52a0\u3057\u307e\u3057\u305f\u3002", "updated_at": "2018-02-25T22:17:24+09:00", "url": "https://qiita.com/neko_the_shadow/items/52b82ff046aab8e2dc96", "user": {"description": "\u3044\u307e\u307e\u3067\u4f7f\u3063\u3066\u3044\u305f\u306f\u3066\u306a\u30d6\u30ed\u30b0\u304c\u3001\u63a8\u7406\u5c0f\u8aac\u3084\u5192\u967a\u5c0f\u8aac\u4e2d\u5fc3\u306e\u66f8\u8a55\u30d6\u30ed\u30b0\u3068\u5316\u3057\u305f\u306e\u3067\u3001\u6280\u8853\u7684\u5185\u5bb9\u306f\u3053\u3061\u3089\u3078\u5f15\u3063\u8d8a\u3057\u3066\u304d\u307e\u3057\u305f(\u00b4\u30fb\u03c9\u30fb`)", "facebook_id": "", "followees_count": 0, "followers_count": 21, "github_login_name": null, "id": "neko_the_shadow", "items_count": 124, "linkedin_id": "", "location": "\u795e\u5948\u5ddd\u770c\u5ddd\u5d0e\u5e02", "name": "", "organization": "", "permanent_id": 105859, "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/105859/profile-images/1473709753", "team_only": false, "twitter_screen_name": "neko_the_shadow", "website_url": "https://nekotheshadow.github.io/"}, "page_views_count": null}